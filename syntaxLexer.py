# Generated from syntax.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,47,335,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
        1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
        1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
        1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,1,14,1,15,1,15,1,15,3,15,187,8,15,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,204,8,16,
        1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,3,18,215,8,18,1,18,
        1,18,1,19,1,19,1,19,1,19,5,19,223,8,19,10,19,12,19,226,9,19,1,19,
        1,19,1,20,4,20,231,8,20,11,20,12,20,232,1,20,1,20,4,20,237,8,20,
        11,20,12,20,238,3,20,241,8,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,
        1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
        1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,
        1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,
        1,40,1,41,1,41,1,42,1,42,1,43,1,43,5,43,296,8,43,10,43,12,43,299,
        9,43,1,44,1,44,1,44,1,44,5,44,305,8,44,10,44,12,44,308,9,44,1,44,
        1,44,1,45,1,45,1,45,1,45,1,45,1,45,5,45,318,8,45,10,45,12,45,321,
        9,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,4,46,330,8,46,11,46,12,46,
        331,1,46,1,46,1,319,0,47,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
        85,43,87,44,89,45,91,46,93,47,1,0,7,4,0,10,10,13,13,39,39,92,92,
        4,0,10,10,13,13,34,34,92,92,1,0,48,57,3,0,65,90,95,95,97,122,4,0,
        48,57,65,90,95,95,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,350,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
        1,0,0,0,0,93,1,0,0,0,1,95,1,0,0,0,3,98,1,0,0,0,5,103,1,0,0,0,7,109,
        1,0,0,0,9,114,1,0,0,0,11,121,1,0,0,0,13,127,1,0,0,0,15,131,1,0,0,
        0,17,138,1,0,0,0,19,143,1,0,0,0,21,149,1,0,0,0,23,158,1,0,0,0,25,
        164,1,0,0,0,27,170,1,0,0,0,29,177,1,0,0,0,31,186,1,0,0,0,33,203,
        1,0,0,0,35,205,1,0,0,0,37,210,1,0,0,0,39,218,1,0,0,0,41,230,1,0,
        0,0,43,242,1,0,0,0,45,245,1,0,0,0,47,248,1,0,0,0,49,251,1,0,0,0,
        51,254,1,0,0,0,53,256,1,0,0,0,55,258,1,0,0,0,57,260,1,0,0,0,59,262,
        1,0,0,0,61,264,1,0,0,0,63,266,1,0,0,0,65,268,1,0,0,0,67,272,1,0,
        0,0,69,275,1,0,0,0,71,277,1,0,0,0,73,279,1,0,0,0,75,281,1,0,0,0,
        77,283,1,0,0,0,79,285,1,0,0,0,81,287,1,0,0,0,83,289,1,0,0,0,85,291,
        1,0,0,0,87,293,1,0,0,0,89,300,1,0,0,0,91,311,1,0,0,0,93,329,1,0,
        0,0,95,96,5,105,0,0,96,97,5,102,0,0,97,2,1,0,0,0,98,99,5,101,0,0,
        99,100,5,108,0,0,100,101,5,115,0,0,101,102,5,101,0,0,102,4,1,0,0,
        0,103,104,5,119,0,0,104,105,5,104,0,0,105,106,5,105,0,0,106,107,
        5,108,0,0,107,108,5,101,0,0,108,6,1,0,0,0,109,110,5,102,0,0,110,
        111,5,117,0,0,111,112,5,110,0,0,112,113,5,99,0,0,113,8,1,0,0,0,114,
        115,5,114,0,0,115,116,5,101,0,0,116,117,5,116,0,0,117,118,5,117,
        0,0,118,119,5,114,0,0,119,120,5,110,0,0,120,10,1,0,0,0,121,122,5,
        112,0,0,122,123,5,114,0,0,123,124,5,105,0,0,124,125,5,110,0,0,125,
        126,5,116,0,0,126,12,1,0,0,0,127,128,5,116,0,0,128,129,5,114,0,0,
        129,130,5,121,0,0,130,14,1,0,0,0,131,132,5,101,0,0,132,133,5,120,
        0,0,133,134,5,99,0,0,134,135,5,101,0,0,135,136,5,112,0,0,136,137,
        5,116,0,0,137,16,1,0,0,0,138,139,5,116,0,0,139,140,5,114,0,0,140,
        141,5,117,0,0,141,142,5,101,0,0,142,18,1,0,0,0,143,144,5,102,0,0,
        144,145,5,97,0,0,145,146,5,108,0,0,146,147,5,115,0,0,147,148,5,101,
        0,0,148,20,1,0,0,0,149,150,5,99,0,0,150,151,5,111,0,0,151,152,5,
        110,0,0,152,153,5,116,0,0,153,154,5,105,0,0,154,155,5,110,0,0,155,
        156,5,117,0,0,156,157,5,101,0,0,157,22,1,0,0,0,158,159,5,98,0,0,
        159,160,5,114,0,0,160,161,5,101,0,0,161,162,5,97,0,0,162,163,5,107,
        0,0,163,24,1,0,0,0,164,165,5,105,0,0,165,166,5,110,0,0,166,167,5,
        116,0,0,167,168,5,91,0,0,168,169,5,93,0,0,169,26,1,0,0,0,170,171,
        5,99,0,0,171,172,5,104,0,0,172,173,5,97,0,0,173,174,5,114,0,0,174,
        175,5,91,0,0,175,176,5,93,0,0,176,28,1,0,0,0,177,178,5,115,0,0,178,
        179,5,116,0,0,179,180,5,114,0,0,180,181,5,91,0,0,181,182,5,93,0,
        0,182,30,1,0,0,0,183,187,3,25,12,0,184,187,3,27,13,0,185,187,3,29,
        14,0,186,183,1,0,0,0,186,184,1,0,0,0,186,185,1,0,0,0,187,32,1,0,
        0,0,188,189,5,105,0,0,189,190,5,110,0,0,190,204,5,116,0,0,191,192,
        5,102,0,0,192,193,5,108,0,0,193,194,5,111,0,0,194,195,5,97,0,0,195,
        204,5,116,0,0,196,197,5,115,0,0,197,198,5,116,0,0,198,204,5,114,
        0,0,199,200,5,99,0,0,200,201,5,104,0,0,201,202,5,97,0,0,202,204,
        5,114,0,0,203,188,1,0,0,0,203,191,1,0,0,0,203,196,1,0,0,0,203,199,
        1,0,0,0,204,34,1,0,0,0,205,206,5,116,0,0,206,207,5,121,0,0,207,208,
        5,112,0,0,208,209,5,101,0,0,209,36,1,0,0,0,210,214,5,39,0,0,211,
        215,8,0,0,0,212,213,5,92,0,0,213,215,9,0,0,0,214,211,1,0,0,0,214,
        212,1,0,0,0,215,216,1,0,0,0,216,217,5,39,0,0,217,38,1,0,0,0,218,
        224,5,34,0,0,219,223,8,1,0,0,220,221,5,92,0,0,221,223,9,0,0,0,222,
        219,1,0,0,0,222,220,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,
        225,1,0,0,0,225,227,1,0,0,0,226,224,1,0,0,0,227,228,5,34,0,0,228,
        40,1,0,0,0,229,231,7,2,0,0,230,229,1,0,0,0,231,232,1,0,0,0,232,230,
        1,0,0,0,232,233,1,0,0,0,233,240,1,0,0,0,234,236,5,46,0,0,235,237,
        7,2,0,0,236,235,1,0,0,0,237,238,1,0,0,0,238,236,1,0,0,0,238,239,
        1,0,0,0,239,241,1,0,0,0,240,234,1,0,0,0,240,241,1,0,0,0,241,42,1,
        0,0,0,242,243,5,60,0,0,243,244,5,61,0,0,244,44,1,0,0,0,245,246,5,
        62,0,0,246,247,5,61,0,0,247,46,1,0,0,0,248,249,5,61,0,0,249,250,
        5,61,0,0,250,48,1,0,0,0,251,252,5,33,0,0,252,253,5,61,0,0,253,50,
        1,0,0,0,254,255,5,60,0,0,255,52,1,0,0,0,256,257,5,62,0,0,257,54,
        1,0,0,0,258,259,5,61,0,0,259,56,1,0,0,0,260,261,5,43,0,0,261,58,
        1,0,0,0,262,263,5,45,0,0,263,60,1,0,0,0,264,265,5,42,0,0,265,62,
        1,0,0,0,266,267,5,47,0,0,267,64,1,0,0,0,268,269,5,97,0,0,269,270,
        5,110,0,0,270,271,5,100,0,0,271,66,1,0,0,0,272,273,5,111,0,0,273,
        274,5,114,0,0,274,68,1,0,0,0,275,276,5,33,0,0,276,70,1,0,0,0,277,
        278,5,59,0,0,278,72,1,0,0,0,279,280,5,44,0,0,280,74,1,0,0,0,281,
        282,5,123,0,0,282,76,1,0,0,0,283,284,5,125,0,0,284,78,1,0,0,0,285,
        286,5,40,0,0,286,80,1,0,0,0,287,288,5,41,0,0,288,82,1,0,0,0,289,
        290,5,91,0,0,290,84,1,0,0,0,291,292,5,93,0,0,292,86,1,0,0,0,293,
        297,7,3,0,0,294,296,7,4,0,0,295,294,1,0,0,0,296,299,1,0,0,0,297,
        295,1,0,0,0,297,298,1,0,0,0,298,88,1,0,0,0,299,297,1,0,0,0,300,301,
        5,47,0,0,301,302,5,47,0,0,302,306,1,0,0,0,303,305,8,5,0,0,304,303,
        1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,309,
        1,0,0,0,308,306,1,0,0,0,309,310,6,44,0,0,310,90,1,0,0,0,311,312,
        5,45,0,0,312,313,5,45,0,0,313,314,5,45,0,0,314,319,1,0,0,0,315,318,
        9,0,0,0,316,318,7,5,0,0,317,315,1,0,0,0,317,316,1,0,0,0,318,321,
        1,0,0,0,319,320,1,0,0,0,319,317,1,0,0,0,320,322,1,0,0,0,321,319,
        1,0,0,0,322,323,5,45,0,0,323,324,5,45,0,0,324,325,5,45,0,0,325,326,
        1,0,0,0,326,327,6,45,0,0,327,92,1,0,0,0,328,330,7,6,0,0,329,328,
        1,0,0,0,330,331,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,333,
        1,0,0,0,333,334,6,46,0,0,334,94,1,0,0,0,14,0,186,203,214,222,224,
        232,238,240,297,306,317,319,331,1,6,0,0
    ]

class syntaxLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    WHILE = 3
    FUNC = 4
    RETURN = 5
    PRINT = 6
    TRY = 7
    EXCEPT = 8
    TRUE = 9
    FALSE = 10
    CONTINUE = 11
    BREAK = 12
    ARR_INT = 13
    ARR_CHAR = 14
    ARR_STR = 15
    ARR_TYPE = 16
    DATA_TYPE = 17
    TYPE_DEF = 18
    CHARACTER = 19
    STRING = 20
    NUMBER = 21
    LE = 22
    GE = 23
    EQ = 24
    NE = 25
    LT = 26
    GT = 27
    ASSIGN = 28
    ADD = 29
    SUB = 30
    MUL = 31
    DIV = 32
    AND = 33
    OR = 34
    NOT = 35
    SEMI = 36
    COMMA = 37
    LBRACE = 38
    RBRACE = 39
    LPAREN = 40
    RPAREN = 41
    LBRACKET = 42
    RBRACKET = 43
    IDENTIFIER = 44
    LINE_COMMENT = 45
    BLOCK_COMMENT = 46
    WS = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'while'", "'func'", "'return'", "'print'", 
            "'try'", "'except'", "'true'", "'false'", "'continue'", "'break'", 
            "'int[]'", "'char[]'", "'str[]'", "'type'", "'<='", "'>='", 
            "'=='", "'!='", "'<'", "'>'", "'='", "'+'", "'-'", "'*'", "'/'", 
            "'and'", "'or'", "'!'", "';'", "','", "'{'", "'}'", "'('", "')'", 
            "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "WHILE", "FUNC", "RETURN", "PRINT", "TRY", "EXCEPT", 
            "TRUE", "FALSE", "CONTINUE", "BREAK", "ARR_INT", "ARR_CHAR", 
            "ARR_STR", "ARR_TYPE", "DATA_TYPE", "TYPE_DEF", "CHARACTER", 
            "STRING", "NUMBER", "LE", "GE", "EQ", "NE", "LT", "GT", "ASSIGN", 
            "ADD", "SUB", "MUL", "DIV", "AND", "OR", "NOT", "SEMI", "COMMA", 
            "LBRACE", "RBRACE", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", 
            "IDENTIFIER", "LINE_COMMENT", "BLOCK_COMMENT", "WS" ]

    ruleNames = [ "IF", "ELSE", "WHILE", "FUNC", "RETURN", "PRINT", "TRY", 
                  "EXCEPT", "TRUE", "FALSE", "CONTINUE", "BREAK", "ARR_INT", 
                  "ARR_CHAR", "ARR_STR", "ARR_TYPE", "DATA_TYPE", "TYPE_DEF", 
                  "CHARACTER", "STRING", "NUMBER", "LE", "GE", "EQ", "NE", 
                  "LT", "GT", "ASSIGN", "ADD", "SUB", "MUL", "DIV", "AND", 
                  "OR", "NOT", "SEMI", "COMMA", "LBRACE", "RBRACE", "LPAREN", 
                  "RPAREN", "LBRACKET", "RBRACKET", "IDENTIFIER", "LINE_COMMENT", 
                  "BLOCK_COMMENT", "WS" ]

    grammarFileName = "syntax.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


