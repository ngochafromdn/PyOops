import dataclass, field

class Symbol: 
    def __init__(self, name, value, scope, address, attribute, type, lineNum):
        self.name = name
        self.value = value
        self.scope = scope
        self.address = address
        self.attribute = attribute
        self.type = type
        self.lineNum = lineNum
    
class SymbolTable:
    symbols: List[Symbol] = field(default_factory=list)
    def add(self, token):
        """add new token in to the symbol table.

        Args:
            token (Token): the Token object generated by sly.
        """
        self.symbols.append(Symbol(type=token.type, value=token.value))

    def get_type_if_duplicate(self, token):
        """gets the type of prev token if the given token
        is a duplicate IDENTIFIER.

        Args:
            token (Token): object of sly Token.

        Returns:
            str: token type if it's exist.
        """
        symbol_type = [s.type for s in self.symbols if s.value == token.value and s.type.startswith('IDENTIFIER')]
        return symbol_type[0] if symbol_type else ''

    def __str__(self):
        """this function make a table to show the symbol table in to the cli.

        Returns:
            str: symbol table as string.
        """
        return tabulate(
            [(i, s.type, s.value) for i, s in enumerate(self.symbols)],
            headers=['#', 'token type', 'value'],
            tablefmt='psql'
        )
