# Generated from d://uni//6 SPRING 25//Programming Language Paradigms//Project//PyOops//syntax.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,44,326,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,1,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
        1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,
        11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,3,13,195,8,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,3,
        15,206,8,15,1,15,1,15,1,16,1,16,1,16,1,16,5,16,214,8,16,10,16,12,
        16,217,9,16,1,16,1,16,1,17,4,17,222,8,17,11,17,12,17,223,1,17,1,
        17,4,17,228,8,17,11,17,12,17,229,3,17,232,8,17,1,18,1,18,1,18,1,
        19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,
        24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,
        29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,
        35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,5,40,287,8,
        40,10,40,12,40,290,9,40,1,41,1,41,1,41,1,41,5,41,296,8,41,10,41,
        12,41,299,9,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,5,42,309,
        8,42,10,42,12,42,312,9,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,4,43,
        321,8,43,11,43,12,43,322,1,43,1,43,1,310,0,44,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
        77,39,79,40,81,41,83,42,85,43,87,44,1,0,7,4,0,10,10,13,13,39,39,
        92,92,4,0,10,10,13,13,34,34,92,92,1,0,48,57,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,
        342,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
        0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,1,89,1,0,0,0,
        3,92,1,0,0,0,5,97,1,0,0,0,7,103,1,0,0,0,9,108,1,0,0,0,11,115,1,0,
        0,0,13,121,1,0,0,0,15,125,1,0,0,0,17,132,1,0,0,0,19,137,1,0,0,0,
        21,143,1,0,0,0,23,152,1,0,0,0,25,158,1,0,0,0,27,194,1,0,0,0,29,196,
        1,0,0,0,31,201,1,0,0,0,33,209,1,0,0,0,35,221,1,0,0,0,37,233,1,0,
        0,0,39,236,1,0,0,0,41,239,1,0,0,0,43,242,1,0,0,0,45,245,1,0,0,0,
        47,247,1,0,0,0,49,249,1,0,0,0,51,251,1,0,0,0,53,253,1,0,0,0,55,255,
        1,0,0,0,57,257,1,0,0,0,59,259,1,0,0,0,61,263,1,0,0,0,63,266,1,0,
        0,0,65,268,1,0,0,0,67,270,1,0,0,0,69,272,1,0,0,0,71,274,1,0,0,0,
        73,276,1,0,0,0,75,278,1,0,0,0,77,280,1,0,0,0,79,282,1,0,0,0,81,284,
        1,0,0,0,83,291,1,0,0,0,85,302,1,0,0,0,87,320,1,0,0,0,89,90,5,105,
        0,0,90,91,5,102,0,0,91,2,1,0,0,0,92,93,5,101,0,0,93,94,5,108,0,0,
        94,95,5,115,0,0,95,96,5,101,0,0,96,4,1,0,0,0,97,98,5,119,0,0,98,
        99,5,104,0,0,99,100,5,105,0,0,100,101,5,108,0,0,101,102,5,101,0,
        0,102,6,1,0,0,0,103,104,5,102,0,0,104,105,5,117,0,0,105,106,5,110,
        0,0,106,107,5,99,0,0,107,8,1,0,0,0,108,109,5,114,0,0,109,110,5,101,
        0,0,110,111,5,116,0,0,111,112,5,117,0,0,112,113,5,114,0,0,113,114,
        5,110,0,0,114,10,1,0,0,0,115,116,5,112,0,0,116,117,5,114,0,0,117,
        118,5,105,0,0,118,119,5,110,0,0,119,120,5,116,0,0,120,12,1,0,0,0,
        121,122,5,116,0,0,122,123,5,114,0,0,123,124,5,121,0,0,124,14,1,0,
        0,0,125,126,5,101,0,0,126,127,5,120,0,0,127,128,5,99,0,0,128,129,
        5,101,0,0,129,130,5,112,0,0,130,131,5,116,0,0,131,16,1,0,0,0,132,
        133,5,116,0,0,133,134,5,114,0,0,134,135,5,117,0,0,135,136,5,101,
        0,0,136,18,1,0,0,0,137,138,5,102,0,0,138,139,5,97,0,0,139,140,5,
        108,0,0,140,141,5,115,0,0,141,142,5,101,0,0,142,20,1,0,0,0,143,144,
        5,99,0,0,144,145,5,111,0,0,145,146,5,110,0,0,146,147,5,116,0,0,147,
        148,5,105,0,0,148,149,5,110,0,0,149,150,5,117,0,0,150,151,5,101,
        0,0,151,22,1,0,0,0,152,153,5,98,0,0,153,154,5,114,0,0,154,155,5,
        101,0,0,155,156,5,97,0,0,156,157,5,107,0,0,157,24,1,0,0,0,158,159,
        5,118,0,0,159,160,5,111,0,0,160,161,5,105,0,0,161,162,5,100,0,0,
        162,26,1,0,0,0,163,164,5,105,0,0,164,165,5,110,0,0,165,195,5,116,
        0,0,166,167,5,102,0,0,167,168,5,108,0,0,168,169,5,111,0,0,169,170,
        5,97,0,0,170,195,5,116,0,0,171,172,5,115,0,0,172,173,5,116,0,0,173,
        195,5,114,0,0,174,175,5,99,0,0,175,176,5,104,0,0,176,177,5,97,0,
        0,177,195,5,114,0,0,178,179,5,105,0,0,179,180,5,110,0,0,180,181,
        5,116,0,0,181,182,5,91,0,0,182,195,5,93,0,0,183,184,5,99,0,0,184,
        185,5,104,0,0,185,186,5,97,0,0,186,187,5,114,0,0,187,188,5,91,0,
        0,188,195,5,93,0,0,189,190,5,115,0,0,190,191,5,116,0,0,191,192,5,
        114,0,0,192,193,5,91,0,0,193,195,5,93,0,0,194,163,1,0,0,0,194,166,
        1,0,0,0,194,171,1,0,0,0,194,174,1,0,0,0,194,178,1,0,0,0,194,183,
        1,0,0,0,194,189,1,0,0,0,195,28,1,0,0,0,196,197,5,116,0,0,197,198,
        5,121,0,0,198,199,5,112,0,0,199,200,5,101,0,0,200,30,1,0,0,0,201,
        205,5,39,0,0,202,206,8,0,0,0,203,204,5,92,0,0,204,206,9,0,0,0,205,
        202,1,0,0,0,205,203,1,0,0,0,206,207,1,0,0,0,207,208,5,39,0,0,208,
        32,1,0,0,0,209,215,5,34,0,0,210,214,8,1,0,0,211,212,5,92,0,0,212,
        214,9,0,0,0,213,210,1,0,0,0,213,211,1,0,0,0,214,217,1,0,0,0,215,
        213,1,0,0,0,215,216,1,0,0,0,216,218,1,0,0,0,217,215,1,0,0,0,218,
        219,5,34,0,0,219,34,1,0,0,0,220,222,7,2,0,0,221,220,1,0,0,0,222,
        223,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,231,1,0,0,0,225,
        227,5,46,0,0,226,228,7,2,0,0,227,226,1,0,0,0,228,229,1,0,0,0,229,
        227,1,0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,231,225,1,0,0,0,231,
        232,1,0,0,0,232,36,1,0,0,0,233,234,5,60,0,0,234,235,5,61,0,0,235,
        38,1,0,0,0,236,237,5,62,0,0,237,238,5,61,0,0,238,40,1,0,0,0,239,
        240,5,61,0,0,240,241,5,61,0,0,241,42,1,0,0,0,242,243,5,33,0,0,243,
        244,5,61,0,0,244,44,1,0,0,0,245,246,5,60,0,0,246,46,1,0,0,0,247,
        248,5,62,0,0,248,48,1,0,0,0,249,250,5,61,0,0,250,50,1,0,0,0,251,
        252,5,43,0,0,252,52,1,0,0,0,253,254,5,45,0,0,254,54,1,0,0,0,255,
        256,5,42,0,0,256,56,1,0,0,0,257,258,5,47,0,0,258,58,1,0,0,0,259,
        260,5,97,0,0,260,261,5,110,0,0,261,262,5,100,0,0,262,60,1,0,0,0,
        263,264,5,111,0,0,264,265,5,114,0,0,265,62,1,0,0,0,266,267,5,33,
        0,0,267,64,1,0,0,0,268,269,5,59,0,0,269,66,1,0,0,0,270,271,5,44,
        0,0,271,68,1,0,0,0,272,273,5,123,0,0,273,70,1,0,0,0,274,275,5,125,
        0,0,275,72,1,0,0,0,276,277,5,40,0,0,277,74,1,0,0,0,278,279,5,41,
        0,0,279,76,1,0,0,0,280,281,5,91,0,0,281,78,1,0,0,0,282,283,5,93,
        0,0,283,80,1,0,0,0,284,288,7,3,0,0,285,287,7,4,0,0,286,285,1,0,0,
        0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,82,1,0,0,0,
        290,288,1,0,0,0,291,292,5,47,0,0,292,293,5,47,0,0,293,297,1,0,0,
        0,294,296,8,5,0,0,295,294,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,
        0,297,298,1,0,0,0,298,300,1,0,0,0,299,297,1,0,0,0,300,301,6,41,0,
        0,301,84,1,0,0,0,302,303,5,45,0,0,303,304,5,45,0,0,304,305,5,45,
        0,0,305,310,1,0,0,0,306,309,9,0,0,0,307,309,7,5,0,0,308,306,1,0,
        0,0,308,307,1,0,0,0,309,312,1,0,0,0,310,311,1,0,0,0,310,308,1,0,
        0,0,311,313,1,0,0,0,312,310,1,0,0,0,313,314,5,45,0,0,314,315,5,45,
        0,0,315,316,5,45,0,0,316,317,1,0,0,0,317,318,6,42,0,0,318,86,1,0,
        0,0,319,321,7,6,0,0,320,319,1,0,0,0,321,322,1,0,0,0,322,320,1,0,
        0,0,322,323,1,0,0,0,323,324,1,0,0,0,324,325,6,43,0,0,325,88,1,0,
        0,0,13,0,194,205,213,215,223,229,231,288,297,308,310,322,1,6,0,0
    ]

class syntaxLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    WHILE = 3
    FUNC = 4
    RETURN = 5
    PRINT = 6
    TRY = 7
    EXCEPT = 8
    TRUE = 9
    FALSE = 10
    CONTINUE = 11
    BREAK = 12
    VOID = 13
    DATA_TYPE = 14
    TYPE_DEF = 15
    CHARACTER = 16
    STRING = 17
    NUMBER = 18
    LE = 19
    GE = 20
    EQ = 21
    NE = 22
    LT = 23
    GT = 24
    ASSIGN = 25
    ADD = 26
    SUB = 27
    MUL = 28
    DIV = 29
    AND = 30
    OR = 31
    NOT = 32
    SEMI = 33
    COMMA = 34
    LBRACE = 35
    RBRACE = 36
    LPAREN = 37
    RPAREN = 38
    LBRACKET = 39
    RBRACKET = 40
    IDENTIFIER = 41
    LINE_COMMENT = 42
    BLOCK_COMMENT = 43
    WS = 44

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'while'", "'func'", "'return'", "'print'", 
            "'try'", "'except'", "'true'", "'false'", "'continue'", "'break'", 
            "'void'", "'type'", "'<='", "'>='", "'=='", "'!='", "'<'", "'>'", 
            "'='", "'+'", "'-'", "'*'", "'/'", "'and'", "'or'", "'!'", "';'", 
            "','", "'{'", "'}'", "'('", "')'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "WHILE", "FUNC", "RETURN", "PRINT", "TRY", "EXCEPT", 
            "TRUE", "FALSE", "CONTINUE", "BREAK", "VOID", "DATA_TYPE", "TYPE_DEF", 
            "CHARACTER", "STRING", "NUMBER", "LE", "GE", "EQ", "NE", "LT", 
            "GT", "ASSIGN", "ADD", "SUB", "MUL", "DIV", "AND", "OR", "NOT", 
            "SEMI", "COMMA", "LBRACE", "RBRACE", "LPAREN", "RPAREN", "LBRACKET", 
            "RBRACKET", "IDENTIFIER", "LINE_COMMENT", "BLOCK_COMMENT", "WS" ]

    ruleNames = [ "IF", "ELSE", "WHILE", "FUNC", "RETURN", "PRINT", "TRY", 
                  "EXCEPT", "TRUE", "FALSE", "CONTINUE", "BREAK", "VOID", 
                  "DATA_TYPE", "TYPE_DEF", "CHARACTER", "STRING", "NUMBER", 
                  "LE", "GE", "EQ", "NE", "LT", "GT", "ASSIGN", "ADD", "SUB", 
                  "MUL", "DIV", "AND", "OR", "NOT", "SEMI", "COMMA", "LBRACE", 
                  "RBRACE", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", 
                  "IDENTIFIER", "LINE_COMMENT", "BLOCK_COMMENT", "WS" ]

    grammarFileName = "syntax.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


