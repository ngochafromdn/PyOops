# Generated from /Users/khuengo/Documents/Fulbright/ComputerScience/Programming Language Paradigm/PyOops/syntax.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,48,342,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,
        2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,3,16,
        194,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,3,17,211,8,17,1,18,1,18,1,18,1,18,1,18,1,19,
        1,19,1,19,1,19,3,19,222,8,19,1,19,1,19,1,20,1,20,1,20,1,20,5,20,
        230,8,20,10,20,12,20,233,9,20,1,20,1,20,1,21,4,21,238,8,21,11,21,
        12,21,239,1,21,1,21,4,21,244,8,21,11,21,12,21,245,3,21,248,8,21,
        1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,
        1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,
        1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,
        1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,
        1,44,5,44,303,8,44,10,44,12,44,306,9,44,1,45,1,45,1,45,1,45,5,45,
        312,8,45,10,45,12,45,315,9,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,
        1,46,5,46,325,8,46,10,46,12,46,328,9,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,47,4,47,337,8,47,11,47,12,47,338,1,47,1,47,1,326,0,48,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,
        95,48,1,0,7,4,0,10,10,13,13,39,39,92,92,4,0,10,10,13,13,34,34,92,
        92,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        2,0,10,10,13,13,3,0,9,10,13,13,32,32,357,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
        75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,
        85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,
        95,1,0,0,0,1,97,1,0,0,0,3,100,1,0,0,0,5,105,1,0,0,0,7,111,1,0,0,
        0,9,116,1,0,0,0,11,123,1,0,0,0,13,129,1,0,0,0,15,133,1,0,0,0,17,
        140,1,0,0,0,19,145,1,0,0,0,21,151,1,0,0,0,23,160,1,0,0,0,25,166,
        1,0,0,0,27,171,1,0,0,0,29,177,1,0,0,0,31,184,1,0,0,0,33,193,1,0,
        0,0,35,210,1,0,0,0,37,212,1,0,0,0,39,217,1,0,0,0,41,225,1,0,0,0,
        43,237,1,0,0,0,45,249,1,0,0,0,47,252,1,0,0,0,49,255,1,0,0,0,51,258,
        1,0,0,0,53,261,1,0,0,0,55,263,1,0,0,0,57,265,1,0,0,0,59,267,1,0,
        0,0,61,269,1,0,0,0,63,271,1,0,0,0,65,273,1,0,0,0,67,275,1,0,0,0,
        69,279,1,0,0,0,71,282,1,0,0,0,73,284,1,0,0,0,75,286,1,0,0,0,77,288,
        1,0,0,0,79,290,1,0,0,0,81,292,1,0,0,0,83,294,1,0,0,0,85,296,1,0,
        0,0,87,298,1,0,0,0,89,300,1,0,0,0,91,307,1,0,0,0,93,318,1,0,0,0,
        95,336,1,0,0,0,97,98,5,105,0,0,98,99,5,102,0,0,99,2,1,0,0,0,100,
        101,5,101,0,0,101,102,5,108,0,0,102,103,5,115,0,0,103,104,5,101,
        0,0,104,4,1,0,0,0,105,106,5,119,0,0,106,107,5,104,0,0,107,108,5,
        105,0,0,108,109,5,108,0,0,109,110,5,101,0,0,110,6,1,0,0,0,111,112,
        5,102,0,0,112,113,5,117,0,0,113,114,5,110,0,0,114,115,5,99,0,0,115,
        8,1,0,0,0,116,117,5,114,0,0,117,118,5,101,0,0,118,119,5,116,0,0,
        119,120,5,117,0,0,120,121,5,114,0,0,121,122,5,110,0,0,122,10,1,0,
        0,0,123,124,5,112,0,0,124,125,5,114,0,0,125,126,5,105,0,0,126,127,
        5,110,0,0,127,128,5,116,0,0,128,12,1,0,0,0,129,130,5,116,0,0,130,
        131,5,114,0,0,131,132,5,121,0,0,132,14,1,0,0,0,133,134,5,101,0,0,
        134,135,5,120,0,0,135,136,5,99,0,0,136,137,5,101,0,0,137,138,5,112,
        0,0,138,139,5,116,0,0,139,16,1,0,0,0,140,141,5,116,0,0,141,142,5,
        114,0,0,142,143,5,117,0,0,143,144,5,101,0,0,144,18,1,0,0,0,145,146,
        5,102,0,0,146,147,5,97,0,0,147,148,5,108,0,0,148,149,5,115,0,0,149,
        150,5,101,0,0,150,20,1,0,0,0,151,152,5,99,0,0,152,153,5,111,0,0,
        153,154,5,110,0,0,154,155,5,116,0,0,155,156,5,105,0,0,156,157,5,
        110,0,0,157,158,5,117,0,0,158,159,5,101,0,0,159,22,1,0,0,0,160,161,
        5,98,0,0,161,162,5,114,0,0,162,163,5,101,0,0,163,164,5,97,0,0,164,
        165,5,107,0,0,165,24,1,0,0,0,166,167,5,118,0,0,167,168,5,111,0,0,
        168,169,5,105,0,0,169,170,5,100,0,0,170,26,1,0,0,0,171,172,5,105,
        0,0,172,173,5,110,0,0,173,174,5,116,0,0,174,175,5,91,0,0,175,176,
        5,93,0,0,176,28,1,0,0,0,177,178,5,99,0,0,178,179,5,104,0,0,179,180,
        5,97,0,0,180,181,5,114,0,0,181,182,5,91,0,0,182,183,5,93,0,0,183,
        30,1,0,0,0,184,185,5,115,0,0,185,186,5,116,0,0,186,187,5,114,0,0,
        187,188,5,91,0,0,188,189,5,93,0,0,189,32,1,0,0,0,190,194,3,27,13,
        0,191,194,3,29,14,0,192,194,3,31,15,0,193,190,1,0,0,0,193,191,1,
        0,0,0,193,192,1,0,0,0,194,34,1,0,0,0,195,196,5,105,0,0,196,197,5,
        110,0,0,197,211,5,116,0,0,198,199,5,102,0,0,199,200,5,108,0,0,200,
        201,5,111,0,0,201,202,5,97,0,0,202,211,5,116,0,0,203,204,5,115,0,
        0,204,205,5,116,0,0,205,211,5,114,0,0,206,207,5,99,0,0,207,208,5,
        104,0,0,208,209,5,97,0,0,209,211,5,114,0,0,210,195,1,0,0,0,210,198,
        1,0,0,0,210,203,1,0,0,0,210,206,1,0,0,0,211,36,1,0,0,0,212,213,5,
        116,0,0,213,214,5,121,0,0,214,215,5,112,0,0,215,216,5,101,0,0,216,
        38,1,0,0,0,217,221,5,39,0,0,218,222,8,0,0,0,219,220,5,92,0,0,220,
        222,9,0,0,0,221,218,1,0,0,0,221,219,1,0,0,0,222,223,1,0,0,0,223,
        224,5,39,0,0,224,40,1,0,0,0,225,231,5,34,0,0,226,230,8,1,0,0,227,
        228,5,92,0,0,228,230,9,0,0,0,229,226,1,0,0,0,229,227,1,0,0,0,230,
        233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,233,
        231,1,0,0,0,234,235,5,34,0,0,235,42,1,0,0,0,236,238,7,2,0,0,237,
        236,1,0,0,0,238,239,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,
        247,1,0,0,0,241,243,5,46,0,0,242,244,7,2,0,0,243,242,1,0,0,0,244,
        245,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,248,1,0,0,0,247,
        241,1,0,0,0,247,248,1,0,0,0,248,44,1,0,0,0,249,250,5,60,0,0,250,
        251,5,61,0,0,251,46,1,0,0,0,252,253,5,62,0,0,253,254,5,61,0,0,254,
        48,1,0,0,0,255,256,5,61,0,0,256,257,5,61,0,0,257,50,1,0,0,0,258,
        259,5,33,0,0,259,260,5,61,0,0,260,52,1,0,0,0,261,262,5,60,0,0,262,
        54,1,0,0,0,263,264,5,62,0,0,264,56,1,0,0,0,265,266,5,61,0,0,266,
        58,1,0,0,0,267,268,5,43,0,0,268,60,1,0,0,0,269,270,5,45,0,0,270,
        62,1,0,0,0,271,272,5,42,0,0,272,64,1,0,0,0,273,274,5,47,0,0,274,
        66,1,0,0,0,275,276,5,97,0,0,276,277,5,110,0,0,277,278,5,100,0,0,
        278,68,1,0,0,0,279,280,5,111,0,0,280,281,5,114,0,0,281,70,1,0,0,
        0,282,283,5,33,0,0,283,72,1,0,0,0,284,285,5,59,0,0,285,74,1,0,0,
        0,286,287,5,44,0,0,287,76,1,0,0,0,288,289,5,123,0,0,289,78,1,0,0,
        0,290,291,5,125,0,0,291,80,1,0,0,0,292,293,5,40,0,0,293,82,1,0,0,
        0,294,295,5,41,0,0,295,84,1,0,0,0,296,297,5,91,0,0,297,86,1,0,0,
        0,298,299,5,93,0,0,299,88,1,0,0,0,300,304,7,3,0,0,301,303,7,4,0,
        0,302,301,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,
        0,305,90,1,0,0,0,306,304,1,0,0,0,307,308,5,47,0,0,308,309,5,47,0,
        0,309,313,1,0,0,0,310,312,8,5,0,0,311,310,1,0,0,0,312,315,1,0,0,
        0,313,311,1,0,0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,313,1,0,0,
        0,316,317,6,45,0,0,317,92,1,0,0,0,318,319,5,45,0,0,319,320,5,45,
        0,0,320,321,5,45,0,0,321,326,1,0,0,0,322,325,9,0,0,0,323,325,7,5,
        0,0,324,322,1,0,0,0,324,323,1,0,0,0,325,328,1,0,0,0,326,327,1,0,
        0,0,326,324,1,0,0,0,327,329,1,0,0,0,328,326,1,0,0,0,329,330,5,45,
        0,0,330,331,5,45,0,0,331,332,5,45,0,0,332,333,1,0,0,0,333,334,6,
        46,0,0,334,94,1,0,0,0,335,337,7,6,0,0,336,335,1,0,0,0,337,338,1,
        0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,341,6,
        47,0,0,341,96,1,0,0,0,14,0,193,210,221,229,231,239,245,247,304,313,
        324,326,338,1,6,0,0
    ]

class syntaxLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    WHILE = 3
    FUNC = 4
    RETURN = 5
    PRINT = 6
    TRY = 7
    EXCEPT = 8
    TRUE = 9
    FALSE = 10
    CONTINUE = 11
    BREAK = 12
    VOID = 13
    ARR_INT = 14
    ARR_CHAR = 15
    ARR_STR = 16
    ARR_TYPE = 17
    DATA_TYPE = 18
    TYPE_DEF = 19
    CHARACTER = 20
    STRING = 21
    NUMBER = 22
    LE = 23
    GE = 24
    EQ = 25
    NE = 26
    LT = 27
    GT = 28
    ASSIGN = 29
    ADD = 30
    SUB = 31
    MUL = 32
    DIV = 33
    AND = 34
    OR = 35
    NOT = 36
    SEMI = 37
    COMMA = 38
    LBRACE = 39
    RBRACE = 40
    LPAREN = 41
    RPAREN = 42
    LBRACKET = 43
    RBRACKET = 44
    IDENTIFIER = 45
    LINE_COMMENT = 46
    BLOCK_COMMENT = 47
    WS = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'while'", "'func'", "'return'", "'print'", 
            "'try'", "'except'", "'true'", "'false'", "'continue'", "'break'", 
            "'void'", "'int[]'", "'char[]'", "'str[]'", "'type'", "'<='", 
            "'>='", "'=='", "'!='", "'<'", "'>'", "'='", "'+'", "'-'", "'*'", 
            "'/'", "'and'", "'or'", "'!'", "';'", "','", "'{'", "'}'", "'('", 
            "')'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "WHILE", "FUNC", "RETURN", "PRINT", "TRY", "EXCEPT", 
            "TRUE", "FALSE", "CONTINUE", "BREAK", "VOID", "ARR_INT", "ARR_CHAR", 
            "ARR_STR", "ARR_TYPE", "DATA_TYPE", "TYPE_DEF", "CHARACTER", 
            "STRING", "NUMBER", "LE", "GE", "EQ", "NE", "LT", "GT", "ASSIGN", 
            "ADD", "SUB", "MUL", "DIV", "AND", "OR", "NOT", "SEMI", "COMMA", 
            "LBRACE", "RBRACE", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", 
            "IDENTIFIER", "LINE_COMMENT", "BLOCK_COMMENT", "WS" ]

    ruleNames = [ "IF", "ELSE", "WHILE", "FUNC", "RETURN", "PRINT", "TRY", 
                  "EXCEPT", "TRUE", "FALSE", "CONTINUE", "BREAK", "VOID", 
                  "ARR_INT", "ARR_CHAR", "ARR_STR", "ARR_TYPE", "DATA_TYPE", 
                  "TYPE_DEF", "CHARACTER", "STRING", "NUMBER", "LE", "GE", 
                  "EQ", "NE", "LT", "GT", "ASSIGN", "ADD", "SUB", "MUL", 
                  "DIV", "AND", "OR", "NOT", "SEMI", "COMMA", "LBRACE", 
                  "RBRACE", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", 
                  "IDENTIFIER", "LINE_COMMENT", "BLOCK_COMMENT", "WS" ]

    grammarFileName = "syntax.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


